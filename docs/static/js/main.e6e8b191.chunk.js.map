{"version":3,"sources":["components/map.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","mapboxgl","accessToken","state","lng","lat","zoom","this","match","params","mountainId","trackId","setState","trackRequest","axios","get","process","pointsRequest","all","then","spread","responses","trackGeoJson","data","pointsGeoJson","centerPoint","coords","centroid","map","container","mapContainer","style","center","_insertMapLayers","_centerMapOnTrack","catch","errors","console","error","on","addSource","addLayer","addControl","NavigationControl","ScaleControl","maxWidth","unit","b","bbox","boundingBox","fitBounds","padding","top","bottom","left","right","ref","el","className","React","Component","App","path","component","route","key","to","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kVA2GeA,E,kDArGb,WAAYC,GAAQ,IAAD,6BACjB,cAAMA,GACNC,IAASC,YAAc,iGACvB,EAAKC,MAAQ,CACXC,IAAK,UACLC,KAAM,QACNC,KAAM,IANS,E,gEAUE,IAAD,SACYC,KAAKP,MAAMQ,MAAMC,OAAzCC,EADY,EACZA,WAAYC,EADA,EACAA,QAClBJ,KAAKK,SAAS,CAAEF,aAAYC,YAE5B,IAAME,EAAeC,IAAMC,IAAIC,6BAAA,oBAAsCN,EAAtC,YAAoDC,EAApD,gBACzBM,EAAgBH,IAAMC,IAAIC,6BAAA,oBAAsCN,EAAtC,YAAoDC,EAApD,iBAChCG,IAAMI,IAAI,CAACL,EAAcI,IAAgBE,KAAKL,IAAMM,QAAO,WAAmB,IAAD,uBAAdC,EAAc,yBAAdA,EAAc,gBAC3E,IAAMC,EAAeD,EAAU,GAAGE,KAC5BC,EAAgBH,EAAU,GAAGE,KAE7BE,EAAcC,IAAOC,mBAASL,IAAe,GAE7CM,EAAM,IAAI3B,IAASF,IAAI,CAC3B8B,UAAW,EAAKC,aAChBC,MAAO,qCACPC,OAAQP,EACRnB,KAAM,EAAKH,MAAMG,OAEnB,EAAK2B,iBAAiBL,EAAKN,EAAcE,GACzC,EAAKU,kBAAkBN,EAAKN,OAC1Ba,OAAM,SAAAC,GACRC,QAAQC,MAAMF,Q,uCAMDR,EAAKN,EAAcE,GAClCI,EAAIW,GAAG,QAAQ,WACbX,EAAIY,UAAU,QAAS,CACrB,KAAQ,UACR,KAAQlB,IAEVM,EAAIa,SAAS,CACX,GAAM,QACN,KAAQ,OACR,OAAU,QACV,OAAU,CACR,YAAa,QACb,WAAY,UAEd,MAAS,CACP,aAAc,UACd,aAAc,KAGlBb,EAAIY,UAAU,SAAU,CACtB,KAAQ,UACR,KAAQhB,IAEVI,EAAIa,SAAS,CACX,GAAM,SACN,KAAQ,SACR,OAAU,SACV,OAAU,CAGR,aAAc,CAAC,SAAU,CAAC,MAAO,QAAS,OAE1C,aAAc,CAAC,MAAO,SACtB,YAAa,CAAC,qBAAsB,yBACpC,cAAe,CAAC,EAAG,IACnB,cAAe,SAInBb,EAAIc,WAAW,IAAIzC,IAAS0C,mBAC5Bf,EAAIc,WAAW,IAAIzC,IAAS2C,aAAa,CACvCC,SAAU,IACVC,KAAM,iB,wCAKMlB,EAAKN,GACrB,IAAMyB,EAAIC,eAAK1B,GACT2B,EAAc,CAAC,CAACF,EAAE,GAAIA,EAAE,IAAK,CAACA,EAAE,GAAIA,EAAE,KAC5CnB,EAAIsB,UAAUD,EAAa,CACzBE,QAAS,CAAEC,IAAK,GAAIC,OAAQ,GAAIC,KAAM,GAAIC,MAAO,Q,+BAI3C,IAAD,OACP,OACE,6BACE,yBAAKC,IAAK,SAAAC,GAAE,OAAI,EAAK3B,aAAe2B,GAAIC,UAAU,sB,GAhGxCC,IAAMC,W,eCUT,SAASC,IAetB,OACE,kBAAC,IAAD,KACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,wBAAwBC,UAAWhE,IAC/C,kBAAC,IAAD,CAAO+D,KAAK,KACV,4BAnBG,CACX,oBACA,kBACA,uBACA,uBACA,eACA,gBACA,qBACA,kBACA,oBACA,kBACA,iBACA,oBASmBlC,KAAI,SAACoC,GACV,OACE,wBAAIC,IAAKD,GACP,kBAAC,IAAD,CAAME,GAAIF,GAAQA,WC5BpBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS9D,MACvB,2DCZN+D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACZ,EAAD,OAEFa,SAASC,eAAe,QDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3D,MAAK,SAAA4D,GACJA,EAAaC,gBAEd7C,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAM2C,c","file":"static/js/main.e6e8b191.chunk.js","sourcesContent":["import React from \"react\";\nimport mapboxgl from 'mapbox-gl';\nimport { centroid, bbox } from '@turf/turf'\nimport coords from '@mapbox/geojson-coords'\nimport axios from 'axios'\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    mapboxgl.accessToken = 'pk.eyJ1Ijoic2V0YXBhazIwMTkiLCJhIjoiY2szdzJhdGx3MDVpaDNpcGltZ3luNDUyMSJ9.lwsV4FsgU1SfbS6QRFlO_A';\n    this.state = {\n      lng: 113.69315, // Initial state for mapbox\n      lat: -7.87643, // Initial state for mapbox\n      zoom: 10, // Initial state for mapbox\n    };\n  }\n\n  componentDidMount() {\n    let { mountainId, trackId } = this.props.match.params\n    this.setState({ mountainId, trackId })\n\n    const trackRequest = axios.get(process.env.PUBLIC_URL + `/map-data/${mountainId}/${trackId}/track.json`)\n    const pointsRequest = axios.get(process.env.PUBLIC_URL + `/map-data/${mountainId}/${trackId}/points.json`)\n    axios.all([trackRequest, pointsRequest]).then(axios.spread((...responses) => {\n      const trackGeoJson = responses[0].data\n      const pointsGeoJson = responses[1].data\n\n      const centerPoint = coords(centroid(trackGeoJson))[0];\n\n      const map = new mapboxgl.Map({\n        container: this.mapContainer,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        center: centerPoint,\n        zoom: this.state.zoom\n      });\n      this._insertMapLayers(map, trackGeoJson, pointsGeoJson)\n      this._centerMapOnTrack(map, trackGeoJson)\n    })).catch(errors => {\n      console.error(errors)\n    })\n\n\n  }\n  \n  _insertMapLayers(map, trackGeoJson, pointsGeoJson) {\n    map.on('load', function () {\n      map.addSource('route', {\n        'type': 'geojson',\n        'data': trackGeoJson\n      });\n      map.addLayer({\n        'id': 'route',\n        'type': 'line',\n        'source': 'route',\n        'layout': {\n          'line-join': 'round',\n          'line-cap': 'square'\n        },\n        'paint': {\n          'line-color': '#e25c64',\n          'line-width': 8\n        }\n      });\n      map.addSource('points', {\n        'type': 'geojson',\n        'data': pointsGeoJson\n      });\n      map.addLayer({\n        'id': 'points',\n        'type': 'symbol',\n        'source': 'points',\n        'layout': {\n          // get the icon name from the source's \"icon\" property\n          // concatenate the name to get an icon from the style's sprite sheet\n          'icon-image': ['concat', ['get', 'icon'], '-15'],\n          // get the title name from the source's \"title\" property\n          'text-field': ['get', 'title'],\n          'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n          'text-offset': [0, 0.6],\n          'text-anchor': 'top'\n        }\n      });\n      // Add zoom and rotation controls to the map.\n      map.addControl(new mapboxgl.NavigationControl());\n      map.addControl(new mapboxgl.ScaleControl({\n        maxWidth: 240,\n        unit: 'metric'\n      }));\n    });\n  }\n\n  _centerMapOnTrack(map, trackGeoJson) {\n    const b = bbox(trackGeoJson);\n    const boundingBox = [[b[0], b[1]], [b[2], b[3]]]\n    map.fitBounds(boundingBox, {\n      padding: { top: 50, bottom: 50, left: 50, right: 50 }\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div ref={el => this.mapContainer = el} className=\"mapContainer\" />\n      </div>\n    )\n  }\n}\n\nexport default Map;\n","import React from \"react\";\nimport Map from \"./components/map\"\nimport {\n  HashRouter as Router,\n  Link,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n// Params are placeholders in the URL that begin\n// with a colon, like the `:id` param defined in\n// the route in this example. A similar convention\n// is used for matching dynamic segments in other\n// popular web frameworks like Rails and Express.\n\nexport default function App() {\n  let routes = [\n    '/agropuro/baderan',\n    '/ijen/paltuding',\n    '/kerinci/kerisik-tuo',\n    '/lawu/cemoro-kandang',\n    '/merapi/selo',\n    '/merbabu/selo',\n    '/merbabu/suwanting',\n    '/raung/kalibaru',\n    '/rinjani/sembalun',\n    '/rinjani/senaru',\n    '/semeru/semeru',\n    '/sindoro/kledung',\n  ]\n  return (\n    <Router>\n        <Switch>\n          <Route path='/:mountainId/:trackId' component={Map}/>\n          <Route path='/'>\n            <ul>\n              {\n                routes.map((route) => {\n                  return (\n                    <li key={route}>\n                      <Link to={route}>{route}</Link>\n                    </li>\n                  )\n                })\n              }\n            </ul>\n          </Route>\n        </Switch>\n    </Router>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}